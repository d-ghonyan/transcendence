services:
  db:
    container_name: db_container
    image: postgres:12.1-alpine
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
       - dbdata:/data/postgres
    ports:
      - "6432:5432"
    networks:
      - barev

  # db_migration:
  #  container_name: db_migration
  #  image: python:3.11-slim
  #  env_file:
  #   - .env
  #  volumes:
  #   - ./db_migrate:/db_migrate
  #   - ./migrations:/migrations
  #   - ./config:/db_migrate/config
  #  restart: "no"
  #  command:
  #   - /bin/sh
  #   - -c
  #   - |
  #     pip install -r ./db_migrate/run_migration_requirements.txt
  #     python ./db_migrate/up_migration.py
  #  depends_on:
  #   - db

  # backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.django
  #   volumes:
  #     - .:/app
  #   ports:
  #     - "8000:8000"

  #   networks:
  #     - barev
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   restart: always

volumes:
  dbdata:

networks:
  barev:
    driver: bridge

# services:
#   db:
#     image: postgres:latest
#     env_file: .docker-env
#     volumes:
#       - ./init.sql:/docker-entrypoint-initdb.d/init.sql
#       - postgres:/var/lib/postgresql/data
#     ports:
#       - 5432:5432

#     networks:
#       - barev

#     restart: always

#   # hardhat:
#   #   stop_grace_period: 5s
#   #   env_file: .docker-env
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile.hardhat
#   #   volumes:
#   #     - ./hardhat:/app
#   #   # networks:
#   #   #   - barev
#   #   depends_on:
#   #     - ganache
#   # ganache:
#   #   build:
#   #     context: .
#   #     dockerfile: Dockerfile.ganache
#   #   stop_grace_period: 5s
#   #   env_file: .docker-env
#   #   volumes:
#   #     - ganache:/data
#   #   ports:
#   #     - 8545:8545
#   #   # networks:
#   #   #   - barev
#   #   restart: always

#   backend:
#     build:
#       context: .
#       dockerfile: Dockerfile.django
#     volumes:
#       - .:/app
#     ports:
#       - "8000:8000"

#     networks:
#       - barev
#     depends_on:
#       - db
#     env_file:
#       - .env
#     restart: always

# volumes:
#   postgres:
#   # ganache:

# networks:
#   barev:
#     driver: bridge

